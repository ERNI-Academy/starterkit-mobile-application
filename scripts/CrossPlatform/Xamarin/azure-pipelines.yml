# Xamarin
# Build a Xamarin project.
# Add steps that test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - '*' # same as '/' for the repository root
    exclude:
    - 'docs/*' # same as 'docs/'
    - 'scripts/*' # same as 'scripts/'
  
stages:
- stage: QualityControl
  jobs:
  - job: SonarQube
    pool: 
      vmImage: windows-2019
  
    # Create the variables in the group CI-Build in the Library
    variables:
      - group: 'CI-Build'
    
    steps:
    # The file has to be in the library as secure file
    - task: DownloadSecureFile@1
      name: uwpCertificate
      displayName: 'Download UWP Signing Certificate'
      inputs:
        secureFile: Code_sign.pfx

    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        projectKey: '<Your SonarQube Project Key>'
        projectName: '<Your SonarQube Project Name>'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          sonar.exclusions=**/Assets/**
          sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/*.coverage
          sonar.exclusions=**/obj/**,**/*.dll
          sonar.cs.nunit.reportsPaths=$(Agent.TempDirectory)/**/*.trx
          sonar.coverage.exclusions=<Add your exclusions separated by ,>
          sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml

    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/Erni.Mobile.Testing.sln'
        feedsToUse: 'config'
        nugetConfigPath: '$(System.DefaultWorkingDirectory)/Nuget.config'

    - task: VSBuild@1
      inputs:
        solution: '**\Erni.Mobile.Testing.sln'
        msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|ARM" /p:AppxPackageDir="$(AppxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=$(uwpCertificate.secureFilePath) /p:PackageCertificatePassword=$(UWPCertificatePassword) /p:AppxPackageSigningEnabled=True'
        maximumCpuCount: true
        restoreNugetPackages: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Unit Tests'
      inputs:
        command: 'test'
        projects: './Test/Erni.Mobile.UnitTests/Erni.Mobile.UnitTests.csproj'
        arguments: '--configuration Debug /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[<Add Exclusion Namespace>]*"'
        feedsToUse: 'config'

    - script: |
        dotnet tool install dotnet-reportgenerator-globaltool -g 
      displayName: Install report generator

    - script: | 
        reportgenerator "-reports:$(Build.SourcesDirectory)/**/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
      displayName: Generate Coverage Report

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml'

    - task: SonarQubeAnalyze@4

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'
    
    
    - script: | 
        cd $(AppxPackageDir)\\Erni.Mobile.UWP_1.0.0.0_Debug_Test
        dir
      displayName: Generate Coverage Report

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          cd $(AppxPackageDir)\\Erni.Mobile.UWP_1.0.0.0_Debug_Test
          .\Install.ps1 -Force
          Set-DisplayResolution -Width 1920 -Height 1080 -Force

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
                    
            function listAumids( $userAccount ) { 
              if ($userAccount -eq "allusers")
              {
                  # Find installed packages for all accounts. Must be run as an administrator in order to use this option.
                  $installedapps = Get-AppxPackage -allusers
              }
              elseif ($userAccount)
              {
                  # Find installed packages for the specified account. Must be run as an administrator in order to use this option.
                  $installedapps = get-AppxPackage -user $userAccount
              }
              else
              {
                  # Find installed packages for the current account.
                  $installedapps = get-AppxPackage
              }
              $aumidList = @()
              foreach ($app in $installedapps)
              {
                  foreach ($id in (Get-AppxPackageManifest $app).package.applications.application.id)
                  {
                      $aumidList += $app.packagefamilyname + "!" + $id
                  }
              }
              return $aumidList
          }

          listAumids(“allusers”)
        
    - task: VSTest@2
      inputs:
        testRunTitle: 'Test Automation'
        testSelector: 'testAssemblies'
        testAssemblyVer2: 'test\Erni.Mobile.TestAutomation\bin\Debug\Erni.Mobile.TestAutomation.dll'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        uiTests: true
        pathtoCustomTestAdapters: 'test\Erni.Mobile.TestAutomation\bin\Debug\'

    - task: PublishTestResults@2
      inputs:
        testRunTitle: 'Unit Tests'
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(System.DefaultWorkingDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy test to Artifact Staging Directory'
      inputs:
        sourceFolder: '$(Agent.TempDirectory)' 
        contents: '**/*.trx'
        targetFolder: $(Build.ArtifactStagingDirectory)/TestResults

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Test Result Artifacts'
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/TestResults
        artifactName: 'TestResults'
  
- stage: BuildArtifacts
  dependsOn: QualityControl

  jobs:
  
  - job: UWP   
  
    pool:
      vmImage: 'windows-latest'
  
    variables:
      - group: 'CI-Build'
      - name: IsMainBranch
        value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    
    steps:
    #Build UWP Application
    - task: DownloadSecureFile@1
      name: uwpCertificate
      displayName: 'Download UWP Signing Certificate'
      inputs:
        secureFile: Code_sign.pfx

    # Sign the Installer ps1 files
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          cd $(System.DefaultWorkingDirectory)\scripts\CrossPlatform\Xamarin\UwpInstaller\
          $pfxpath = '$(uwpCertificate.secureFilePath)'
          $password = '$(UWPCertificatePassword)'
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          Set-AuthenticodeSignature -FilePath Install-CertificateAndSideLoad.ps1 -Certificate $cert -TimeStampServer http://timestamp.digicert.com
          Set-AuthenticodeSignature -FilePath Install-UntrustedAppx.ps1 -Certificate $cert -TimeStampServer http://timestamp.digicert.com
          Set-AuthenticodeSignature -FilePath Uninstall-UntrustedAppx.ps1 -Certificate $cert -TimeStampServer http://timestamp.digicert.com

    - task: NuGetToolInstaller@1
  
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/Erni.Mobile.sln'
        feedsToUse: 'config'
        nugetConfigPath: '$(System.DefaultWorkingDirectory)/Nuget.config'
        
    - task: FileTransform@1
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)'
        fileType: 'json'
        targetFiles: 'src/Erni.Mobile/appsettings.json'
    
    - task: VSBuild@1
      inputs:
        platform: 'x86'
        solution: '**/*.UWP/*.csproj'
        configuration: '$(BuildConfiguration)'
        msbuildArgs: '/p:AppxBundlePlatforms="x86" /p:AppxPackageDir="$(AppxPackageDir)/x86" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=$(uwpCertificate.secureFilePath) /p:PackageCertificatePassword=$(UWPCertificatePassword) /p:AppxPackageSigningEnabled=True'

    - task: VSBuild@1
      inputs:
        platform: 'x64'
        solution: '**/*.UWP/*.csproj'
        configuration: '$(BuildConfiguration)'
        msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(AppxPackageDir)/x64" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=$(uwpCertificate.secureFilePath) /p:PackageCertificatePassword=$(UWPCertificatePassword) /p:AppxPackageSigningEnabled=True'

    - task: VSBuild@1
      inputs:
        platform: 'ARM'
        solution: '**/*.UWP/*.csproj'
        configuration: '$(BuildConfiguration)'
        msbuildArgs: '/p:AppxBundlePlatforms="ARM" /p:AppxPackageDir="$(AppxPackageDir)/ARM" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=$(uwpCertificate.secureFilePath) /p:PackageCertificatePassword=$(UWPCertificatePassword) /p:AppxPackageSigningEnabled=True'
    
    # Create MSI for x86
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          md $(System.DefaultWorkingDirectory)\Installer\x86
          Copy-Item -Path "$(AppxPackageDir)\x86\Erni.Mobile.UWP_1.0.0.0_Test\*" -Destination "$(System.DefaultWorkingDirectory)\Installer\x86" -recurse -Force -Verbose
          Copy-Item -Path "$(System.DefaultWorkingDirectory)\scripts\UwpInstaller\*" -Destination "$(System.DefaultWorkingDirectory)\Installer\x86" -recurse -Force -Verbose
          cd $(System.DefaultWorkingDirectory)\Installer\x86
          .\Generate-AppxMsi.ps1 Erni.Mobile.UWP_1.0.0.0_x86 Template_x86
          $pfxpath = '$(uwpCertificate.secureFilePath)'
          $password = '$(UWPCertificatePassword)'
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          Set-AuthenticodeSignature -FilePath "$(System.DefaultWorkingDirectory)\Installer\x86\Erni.Mobile.UWP_1.0.0.0_x86.msi" -Certificate $cert -TimeStampServer http://timestamp.digicert.com
          Copy-Item -Path "$(System.DefaultWorkingDirectory)\Installer\x86\Erni.Mobile.UWP_1.0.0.0_x86.msi" -Destination "$(AppxPackageDir)\x86\Erni.Mobile.UWP_1.0.0.0_Test\" -recurse -Force -Verbose

    # Create MSI for x64
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          md $(System.DefaultWorkingDirectory)\Installer\x64
          Copy-Item -Path "$(AppxPackageDir)\x64\Erni.Mobile.UWP_1.0.0.0_Test\*" -Destination "$(System.DefaultWorkingDirectory)\Installer\x64" -recurse -Force -Verbose
          Copy-Item -Path "$(System.DefaultWorkingDirectory)\scripts\UwpInstaller\*" -Destination "$(System.DefaultWorkingDirectory)\Installer\x64" -recurse -Force -Verbose
          cd $(System.DefaultWorkingDirectory)\Installer\x64
          .\Generate-AppxMsi.ps1 Erni.Mobile.UWP_1.0.0.0_x64 Template_x64
          $pfxpath = '$(uwpCertificate.secureFilePath)'
          $password = '$(UWPCertificatePassword)'
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          Set-AuthenticodeSignature -FilePath "$(System.DefaultWorkingDirectory)\Installer\x64\Erni.Mobile.UWP_1.0.0.0_x64.msi" -Certificate $cert -TimeStampServer http://timestamp.digicert.com
          Copy-Item -Path "$(System.DefaultWorkingDirectory)\Installer\x64\Erni.Mobile.UWP_1.0.0.0_x64.msi" -Destination "$(AppxPackageDir)\x64\Erni.Mobile.UWP_1.0.0.0_Test\" -recurse -Force -Verbose

    # Check the output folder
    - task: PowerShell@2
      condition: and(succeeded(), eq(variables['IsMainBranch'], false)) 
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          cd "$(AppxPackageDir)\x86\Erni.Mobile.UWP_1.0.0.0_Test\"
          dir *.*

          cd "$(AppxPackageDir)\x64\Erni.Mobile.UWP_1.0.0.0_Test\"
          dir *.*

    # Publish UWP package for main branch builds
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      condition: and(succeeded(), eq(variables['IsMainBranch'], true)) 
      inputs:
        pathToPublish: $(AppxPackageDir)
        artifactName: 'UWP'

  - job: Android_and_iOS
    dependsOn: UWP

    pool:
      vmImage: 'macOS-10.15'

    variables:
      - group: 'CI-Build'
      - name: IsMainBranch
        value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

    steps:

    # Install .NET Core SDK
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 
        checkLatest: true

    - task: MSBuild@1
      inputs:
        solution: '**/Erni.Mobile.sln'
        msbuildArchitecture: 'x64'
        msbuildArguments: '/t:restore'

    - task: FileTransform@1
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)'
        fileType: 'json'
        targetFiles: 'src/Erni.Mobile/appsettings.json'

    #Build Android Application  
    #Update Android application version
    - task: android-manifest-version@1
      inputs:
        sourcePath: '$(AndroidManifestPath)'
        versionCodeOption: 'buildid'
        versionCode: '$(Build.BuildId)'
        printFile: true

    #Compile Android application
    - task: XamarinAndroid@1
      inputs:
        projectFile: '**/*.Android/*.csproj'
        outputDirectory: '$(Build.BinariesDirectory)/Android'
        configuration: '$(buildConfiguration)'
        msbuildVersionOption: 'latest'
        jdkOption: 'JDKVersion'
      
    - task: CopyFiles@2
      displayName: 'Copy APK to Staging Directory'
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)/Android' 
        contents: '**/*.apk'
        targetFolder: $(Build.ArtifactStagingDirectory)/Android
      
     # Publish Android package for main branch builds
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      condition: and(succeeded(), eq(variables['IsMainBranch'], true)) 
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/Android
        artifactName: 'Android'
    
    #Build iOS Application
    # Select Mono SDK Version used by Xamarin
    - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MonoVersion) 
      displayName: 'Select Xamarin SDK Version'
    
    # Install Signing Certificate and Provisioning Profile
    - task: InstallAppleCertificate@2
      displayName: 'Install Apple Signing Identity'
      inputs:
        certSecureFile: 'DevOps_AdHoc.p12'
        certPwd: '$(AppleCertificatePassword)'
        keychain: 'temp'
        deleteCert: true 
       
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install Apple Provisioning Profile'
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: 'Ad_Hoc.mobileprovision'
        removeProfile: true
    
    # Update iOS Version
    - task: ios-bundle-version@1
      displayName: 'Update iOS Version Number'
      inputs:
        sourcePath: '$(AppleSettingsFileName)'
        versionCodeOption: 'buildid'
        versionCode: '$(Build.BuildId)'
        printFile: true
    
    # Build and Sign IPA file from iOS project
    - task: XamariniOS@2
      displayName: 'Build iOS Package'
      inputs:
        solutionFile: '**/*.iOS/*.csproj'
        configuration: '$(BuildConfiguration)'
        buildForSimulator: false
        packageApp: $(IsMainBranch)
        runNugetRestore: false
        args: '/p:OutputPath="$(Build.BinariesDirectory)/iOS/"'
        signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'
    
    # Copy and Publish IPA Output
    - task: CopyFiles@2
      displayName: 'Copy IPA to Staging Directory'
      condition: and(succeeded(), eq(variables['IsMainBranch'], true)) 
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)/iOS' 
        contents: |
          **/*.ipa
          **/*.dSYM/**
        targetFolder: $(Build.ArtifactStagingDirectory)/iOS
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      condition: and(succeeded(), eq(variables['IsMainBranch'], true)) 
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/iOS
        artifactName: 'iOS'
